import asyncio
import locale
import logging
import os
from datetime import datetime

import arrow
import matplotlib.pyplot as plt
import pandas as pd
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State as _State
from babel.dates import format_datetime, format_date

from create_bot import dp, bot
from misc.database import *
from misc.keyboards import *

class UserState(StatesGroup):
    waiting_for_time = _State()
    add_habit = _State()
    add_habit_second = _State()
    add_habit_third = _State()
    add_habit_fourth = _State()
    upd_habit = _State()
    upd_habit_second = _State()
    upd_habit_third = _State()
    upd_habit_fourth = _State()

logging.basicConfig(level=logging.INFO)

day_mapping = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1,
    '–≤—Ç–æ—Ä–Ω–∏–∫': 2,
    '—Å—Ä–µ–¥–∞': 3,
    '—á–µ—Ç–≤–µ—Ä–≥': 4,
    '–ø—è—Ç–Ω–∏—Ü–∞': 5,
    '—Å—É–±–±–æ—Ç–∞': 6,
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 7
}

async def send_notifications():
    while True:
        try:
            current_time = arrow.now('Europe/Moscow').format('H:mm')
            logging.info(f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}')
            users_with_notifications = Users.select().where(Users.notices == True)
            for user in users_with_notifications:
                if current_time == user.time_notices:
                    habits = Habits.select().where(Habits.user_id == user.user_id)
                    today_day = arrow.now('Europe/Moscow').isoweekday()
                    habit_list = []
                    for habit in habits:
                        days_list = habit.days.split(',')
                        days_as_numbers = []
                        for day in days_list:
                            day = day.strip().lower()
                            if day in day_mapping:
                                days_as_numbers.append(day_mapping[day])
                            else:
                                logging.warning(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å: {day}')
                        if today_day in days_as_numbers:
                            habit_list.append(habit.name)
                    if habit_list:
                        await bot.send_message(user.user_id, f"–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join(habit_list))
                        logging.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {habit_list}')
        except Exception as e:
            logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        await asyncio.sleep(60)

async def start(message: types.Message):
    if not Users.select().where(Users.user_id == message.chat.id).exists():
        Users.create(user_id=message.chat.id)
    await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuUser)

async def handler(message: types.Message):
    if not Users.select().where(Users.user_id == message.chat.id).exists():
        return await message.answer("–ù–∞–ø–∏—à–∏ /start.")
    if message.text == '‚ùì –ü–æ–º–æ—â—å':
        await message.answer('–î–µ–π—Å—Ç–≤—É—é—â–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:', reply_markup=support)
    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏', reply_markup=menuUserCancel)
        await UserState.add_habit.set()
    elif message.text == 'üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏':
        if not Habits.select().where(Habits.user_id == message.chat.id).exists():
            return await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menuUser)
        habits = InlineKeyboardMarkup()
        for habit in Habits.select().where(Habits.user_id == message.chat.id):
            habits.add(
                InlineKeyboardButton(text=f'{habit.name}', callback_data=f'habits_{habit.id}')
            )
        habits.add(
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_user')
        )
        await message.answer('–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:', reply_markup=habits)
    elif message.text == '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ':
        if not Habits.select().where(Habits.user_id == message.chat.id).exists():
            return await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menuUser)
        now = arrow.now()
        day_of_week = format_datetime(now.datetime, 'EEEE', locale='ru_RU')
        formatted_date = format_date(now.date(), format='dd MMMM yyyy', locale='ru_RU')
        habits = InlineKeyboardMarkup()
        has_habits_today = False
        for habit in Habits.select().where(Habits.user_id == message.chat.id):
            if day_of_week in habit.days:
                if formatted_date not in habit.history:
                    habits.add(
                        InlineKeyboardButton(text=f'{habit.name}', callback_data=f'habits_executed|{habit.id}')
                    )
                    has_habits_today = True
        if not has_habits_today:
            return await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', reply_markup=menuUser)
        habits.add(
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_user')
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:', reply_markup=habits)
    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=settings)
    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        if not Habits.select().where(Habits.user_id == message.chat.id).exists():
            return await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menuUser)
        habits = InlineKeyboardMarkup()
        for habit in Habits.select().where(Habits.user_id == message.chat.id):
            habits.add(
                InlineKeyboardButton(text=f'{habit.name}', callback_data=f'habits_history|{habit.id}')
            )
        habits.add(
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_user')
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:', reply_markup=habits)

def parse_date(date_str):
    months = {
        '—è–Ω–≤–∞—Ä—è': 1,
        '—Ñ–µ–≤—Ä–∞–ª—è': 2,
        '–º–∞—Ä—Ç–∞': 3,
        '–∞–ø—Ä–µ–ª—è': 4,
        '–º–∞—è': 5,
        '–∏—é–Ω—è': 6,
        '–∏—é–ª—è': 7,
        '–∞–≤–≥—É—Å—Ç–∞': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—è': 9,
        '–æ–∫—Ç—è–±—Ä—è': 10,
        '–Ω–æ—è–±—Ä—è': 11,
        '–¥–µ–∫–∞–±—Ä—è': 12
    }
    parts = date_str.strip().split()
    day = int(parts[0])
    month_name = parts[1]
    year = int(parts[2])
    month = months.get(month_name)
    if month is None:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞: {month_name}")
    return datetime(year, month, day)

@dp.callback_query_handler(lambda c: 'habits_history|' in c.data)
async def habits_history(call: types.CallbackQuery):
    await call.message.delete()
    habits_id = call.data.split('|')[1]
    habitInfo = Habits.select().where(Habits.id == habits_id)[0]
    menuUserCancelHistory = InlineKeyboardMarkup()
    menuUserCancelHistory.add(
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='cancel_user_history')
    )
    if not habitInfo.history:
        await call.message.answer(f'–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ {habitInfo.name} –ø—É—Å—Ç–∞!', reply_markup=menuUserCancelHistory, parse_mode='html')
        return
    history_cleaned = habitInfo.history.strip(", ")
    dates_str = history_cleaned.split(", ")
    dates = []
    for date_str in dates_str:
        try:
            date = parse_date(date_str)
            dates.append(date)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã: {date_str} - {e}")
    if not dates:
        await call.message.answer(f'–í—Å–µ –¥–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ {habitInfo.name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!', reply_markup=menuUserCancelHistory, parse_mode='html')
        return
    try:
        locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    except locale.Error as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞–ª–∏: {e}")
    dates_text = "\n".join([d.strftime("%d %B %Y") for d in dates])
    df = pd.DataFrame(dates, columns=['date'])
    df['count'] = 1
    daily_counts = df.groupby(df['date']).count().reset_index()
    daily_counts = daily_counts.sort_values('date')
    user_id = call.from_user.id
    photo_dir = f"photo/{user_id}"
    if not os.path.exists(photo_dir):
        os.makedirs(photo_dir)
    filename = f"habit_statistics_{user_id}.png"
    filepath = os.path.join(photo_dir, filename)
    plt.figure(figsize=(12, 6))
    plt.bar(daily_counts['date'], daily_counts['count'], color='skyblue')
    plt.title(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ "{habitInfo.name}" –ø–æ –¥–Ω—è–º')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π')
    plt.xticks(rotation=45, ha='right')
    plt.gca().xaxis.set_major_locator(plt.MaxNLocator(10))
    plt.tight_layout()
    plt.grid(axis='y')
    plt.savefig(filepath)
    plt.close()
    try:
        with open(filepath, 'rb') as photo:
            await call.message.answer_photo(photo, caption=f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ {habitInfo.name}\n\n' f'–î–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{dates_text}', reply_markup=menuUserCancelHistory, parse_mode='html')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        try:
            os.remove(filepath)
            print(f"–§–∞–π–ª {filepath} —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")

@dp.callback_query_handler(lambda c: c.data == 'cancel_user_history')
async def cancel_user_history(call: types.CallbackQuery):
    await call.message.delete()
    if not Habits.select().where(Habits.user_id == call.message.chat.id).exists():
        return await call.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menuUser)
    habits = InlineKeyboardMarkup()
    for habit in Habits.select().where(Habits.user_id == call.message.chat.id):
        habits.add(
            InlineKeyboardButton(text=f'{habit.name}', callback_data=f'habits_history|{habit.id}')
        )
    habits.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_user')
    )
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:', reply_markup=habits)

@dp.callback_query_handler(lambda c: c.data == 'notices')
async def notices(call: types.CallbackQuery):
    await call.message.delete()
    userinfo = Users.select().where(Users.user_id == call.message.chat.id)[0]
    notices_set = InlineKeyboardMarkup()
    if userinfo.notices:
        notices_set.add(
            InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{call.message.chat.id}')
        )
    else:
        notices_set.add(
            InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{call.message.chat.id}')
        )
    notices_set.add(
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'changetime_notices|{call.message.chat.id}')
    )
    notices_set.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_settings')
    )
    await call.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç–∞ –≤ <code>{userinfo.time_notices}</code> –ø–æ –º—Å–∫', reply_markup=notices_set, parse_mode='html')

@dp.callback_query_handler(lambda c: c.data == 'cancel_settings')
async def cancel_settings(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=settings)

@dp.callback_query_handler(lambda c: 'fire_notices|' in c.data)
async def fire_notices(call: types.CallbackQuery):
    await call.message.delete()
    user_id = call.data.split('|')[1]
    userinfo = Users.select().where(Users.user_id == call.message.chat.id)[0]
    Users.update(notices=not userinfo.notices).where(Users.user_id == user_id).execute()
    userinfo = Users.select().where(Users.user_id == call.message.chat.id)[0]
    notices_set = InlineKeyboardMarkup()
    if userinfo.notices:
        notices_set.add(
            InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{call.message.chat.id}')
        )
    else:
        notices_set.add(
            InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{call.message.chat.id}')
        )
    notices_set.add(
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'changetime_notices|{call.message.chat.id}')
    )
    notices_set.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_settings')
    )
    await call.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç–∞ –≤ <code>{userinfo.time_notices}</code> –ø–æ –º—Å–∫', reply_markup=notices_set, parse_mode='html')

@dp.callback_query_handler(lambda c: 'habits_executed|' in c.data)
async def habits_executed(call: types.CallbackQuery):
    await call.message.delete()
    habit_id = call.data.split('|')[1]
    now = arrow.now()
    formatted_date = now.format('DD MMMM YYYY', locale='ru')
    habitInfo = Habits.select().where(Habits.id == habit_id)[0]
    if habitInfo.history:
        habitInfo.history += f', {formatted_date}'
    else:
        habitInfo.history = formatted_date
    habitInfo.save()
    await call.message.answer(f'–ü—Ä–∏–≤—ã—á–∫–∞ <code>{habitInfo.name}</code> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!', reply_markup=menuUser, parse_mode='html')

@dp.callback_query_handler(lambda c: 'changetime_notices|' in c.data)
async def change_time_notices(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=menuUserCancel)
    await UserState.waiting_for_time.set()

@dp.message_handler(state=UserState.waiting_for_time)
async def process_new_time(message: types.Message, state: FSMContext):
    new_time = message.text.strip()
    try:
        time_obj = arrow.get(new_time, 'HH:mm')
        formatted_time = time_obj.format('HH:mm')
    except arrow.parser.ParserError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.", reply_markup=menuUserCancel)
        return
    Users.update(time_notices=formatted_time).where(Users.user_id == message.chat.id).execute()
    userinfo = Users.select().where(Users.user_id == message.chat.id)[0]
    notices_set = InlineKeyboardMarkup()
    if userinfo.notices:
        notices_set.add(
            InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{message.chat.id}')
        )
    else:
        notices_set.add(
            InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å', callback_data=f'fire_notices|{message.chat.id}')
        )
    notices_set.add(
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'changetime_notices|{message.chat.id}')
    )
    notices_set.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_settings')
    )
    await message.answer(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{formatted_time}</code> –ø–æ –º—Å–∫.", parse_mode='html', reply_markup=notices_set)
    await state.finish()

@dp.callback_query_handler(lambda c: 'habits_' in c.data)
async def habitinfo(call: types.CallbackQuery):
    await call.message.delete()
    habit_id = call.data.split('_')[1]
    habitInfo = Habits.select().where(Habits.id == habit_id)[0]
    backuserhabit = InlineKeyboardMarkup()
    backuserhabit.add(
        InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f'changeHabits_{habit_id}')
    ).add(
        InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delHabits_{habit_id}')
    ).add(
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='backUser_habit')
    )
    await call.message.answer(f'–ü—Ä–∏–≤—ã—á–∫–∞: <code>{habitInfo.name}</code>\n–¶–µ–ª—å: <code>{habitInfo.target}</code>\n–î–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{habitInfo.days}</code>', reply_markup=backuserhabit, parse_mode='html')

@dp.callback_query_handler(lambda c: 'changeHabits_' in c.data)
async def changeHabits(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    habit_id = call.data.split('_')[1]
    await state.update_data(habit_id=habit_id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏', reply_markup=menuUserCancel)
    await UserState.upd_habit.set()

@dp.message_handler(state=UserState.upd_habit)
async def upd_habit(message: types.Message, state: FSMContext):
    await state.update_data(habit=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å\n(–ù–∞–ø—Ä–∏–º–µ—Ä, "–ø–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å")', reply_markup=menuUserCancel)
    await UserState.upd_habit_second.set()

@dp.message_handler(state=UserState.upd_habit_second)
async def upd_habit_second(message: types.Message, state: FSMContext):
    await state.update_data(target=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞)', reply_markup=menuUserCancel)
    await UserState.upd_habit_third.set()

@dp.message_handler(state=UserState.upd_habit_third)
async def upd_habit_third(message: types.Message, state: FSMContext):
    await state.update_data(days=message.text)
    data = await state.get_data()
    days = data['days']
    days = [day.strip().lower() for day in days.split(',')]
    lastmenu_addhabit = InlineKeyboardMarkup()
    lastmenu_addhabit.add(
        InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'updhabit_')
    ).add(
        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_user')
    )
    await message.answer(f'–í–∞—à–∞ –ø—Ä–∏–≤—ã—á–∫–∞: <code>{data["habit"]}</code>\n–í–∞—à–∞ —Ü–µ–ª—å: <code>{data["target"]}</code>\n–î–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{",".join(days)}</code>', reply_markup=lastmenu_addhabit, parse_mode='html')
    await UserState.upd_habit_fourth.set()

@dp.callback_query_handler(lambda c: c.data == 'updhabit_', state=UserState.upd_habit_fourth)
async def updhabit_finish(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()
    days = data['days']
    days = [day.strip().lower() for day in days.split(',')]
    Habits.update(user_id=call.message.chat.id, name=data["habit"], target=data["target"], days=','.join(days)).where(Habits.id == data["habit_id"]).execute()
    await call.message.answer(f'–û–±–Ω–æ–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É: <code>{data["habit"]}</code>\n–¶–µ–ª—å: <code>{data["target"]}</code>\n–î–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{",".join(days)}</code>', reply_markup=menuUser, parse_mode='html')
    await state.reset_state(with_data=False)

@dp.callback_query_handler(lambda c: 'delHabits_' in c.data)
async def delHabit(call: types.CallbackQuery):
    await call.message.delete()
    habit_id = call.data.split('_')[1]
    habitInfo = Habits.select().where(Habits.id == habit_id)[0]
    habitInfo.delete_instance()
    await call.message.answer('–£–¥–∞–ª–∏–ª!', reply_markup=menuUser)

@dp.callback_query_handler(lambda c: c.data == 'backUser_habit', state="*")
async def backUser_habit(call: types.CallbackQuery):
    await call.message.delete()
    habits = InlineKeyboardMarkup()
    for habit in Habits.select().where(Habits.user_id == call.message.chat.id):
        habits.add(
            InlineKeyboardButton(text=f'{habit.name}', callback_data=f'habits_{habit.id}')
        )
    habits.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='cancel_user')
    )
    await call.message.answer('–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:', reply_markup=habits)

@dp.message_handler(state=UserState.add_habit)
async def add_habit(message: types.Message, state: FSMContext):
    await state.update_data(habit=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å\n(–ù–∞–ø—Ä–∏–º–µ—Ä, "–ø–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å")', reply_markup=menuUserCancel)
    await UserState.add_habit_second.set()

@dp.message_handler(state=UserState.add_habit_second)
async def add_habit_second(message: types.Message, state: FSMContext):
    await state.update_data(target=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞)', reply_markup=menuUserCancel)
    await UserState.add_habit_third.set()

@dp.message_handler(state=UserState.add_habit_third)
async def add_habit_third(message: types.Message, state: FSMContext):
    data = await state.get_data()
    habit = data['habit']
    target = data['target']
    await state.update_data(days=message.text)
    lastmenu_addhabit = InlineKeyboardMarkup()
    lastmenu_addhabit.add(
        InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'savehabit_')
    ).add(
        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_user')
    )
    await message.answer(f'–í–∞—à–∞ –ø—Ä–∏–≤—ã—á–∫–∞: <code>{habit}</code>\n–í–∞—à–∞ —Ü–µ–ª—å: <code>{target}</code>\n–î–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {message.text}', reply_markup=lastmenu_addhabit, parse_mode='html')
    await UserState.add_habit_fourth.set()

@dp.callback_query_handler(lambda c: c.data == 'savehabit_', state=UserState.add_habit_fourth)
async def savehabit(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()
    habit = data['habit']
    target = data['target']
    days = data['days']
    days = [day.strip().lower() for day in days.split(',')]
    Habits.create(user_id=call.message.chat.id, name=habit, target=target, days=','.join(days))
    await call.message.answer(f'–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É: <code>{habit}</code>\n–¶–µ–ª—å: <code>{target}</code>\n–î–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{", ".join(days)}</code>', reply_markup=menuUser, parse_mode='html')
    await state.reset_state(with_data=False)

@dp.callback_query_handler(lambda c: c.data == 'cancel_user', state="*")
async def cancel_user(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await call.message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuUser)

def register_handlers_user():
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(handler)